# Add imports for KFP DSL Input/Output and Artifact types
from kfp.dsl import Input, Output # Only import once
{% for art_type in kfp_dsl_artifact_imports %}
{%- if art_type != "Input" and art_type != "Output" %}
from kfp.dsl import {{ art_type }}
{%- endif %}
{% endfor %}

@_kfp_dsl.component(
    base_image='python:3.10',
    packages_to_install=['dill', 'pandas', 'numpy', 'scikit-learn', 'joblib']
)
def {{ step.name }}({{ component_signature_args }}):
    # This block populates pipeline parameters. If these are also component args,
    # then they will be overwritten by values passed as args.
    _kale_pipeline_parameters_block = '''
{%- for param in step.parameters.values() %}
    {%- if param.name and (param.name not in component_signature_args): %}
    {{ param.name }} = {{ param.param_value | quote_if_not_none }}
    {%- endif %}
{%- endfor %}
    '''

    from backend.kale.common import mlmdutils as _kale_mlmdutils
    _kale_mlmdutils.init_metadata()

    _kale_data_loading_block = '''
    # -----------------------DATA LOADING START--------------------------------
    from backend.kale import marshal as _kale_marshal
    _kale_marshal.set_data_dir("/marshal")
{%- for io in step_kfp_inputs %}
    {%- if io is instanceof(Artifact) %}
    {{ io.name }} = _kale_marshal.load("{{ io.name }}", path={{ io.name }}.path)
    {%- endif %}
{%- endfor %}
    # -----------------------DATA LOADING END----------------------------------
    '''

    {% for block_content in step.source %}
    _kale_block{{ loop.index }} = '''
    {{ block_content }}
    '''
    {% endfor %}

    _kale_data_saving_block = '''
    # -----------------------DATA SAVING START---------------------------------
    from backend.kale import marshal as _kale_marshal
    _kale_marshal.set_data_dir("/marshal")
{%- for io in step_kfp_outputs %}
    {%- if io is instanceof(Artifact) %}
    _kale_marshal.save({{ io.name }}, "{{ io.name }}", path={{ io.name }}.path)
    {%- endif %}
{%- endfor %}
    # -----------------------DATA SAVING END-----------------------------------
    '''

    # run the code blocks inside a jupyter kernel
    from backend.kale.common.jputils import run_code as _kale_run_code
    from backend.kale.common.kfputils import \
        update_uimetadata as _kale_update_uimetadata
    
    _kale_blocks = (
        _kale_pipeline_parameters_block,
        _kale_data_loading_block,
{% for block_index in range(1, step.source | length + 1) %}
        _kale_block{{ block_index }},{% endfor %}
        _kale_data_saving_block
    )
    
    _kale_html_artifact = _kale_run_code(_kale_blocks)
    with open("/{{ step.name }}.html", "w") as f:
        f.write(_kale_html_artifact)
    _kale_update_uimetadata('{{ step.name }}')

    _kale_mlmdutils.call("mark_execution_complete")

{% if step.kfp_outputs %}
    return {% for art in step.kfp_outputs %}{{ art.name }}{% if not loop.last %}, {% endif %}{% endfor %}
{% endif %}