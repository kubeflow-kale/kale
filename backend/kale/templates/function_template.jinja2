def {{ step.name }}({%- for arg in step.pps_names -%}
    {{ arg }}: {{ (step.pps_types)[loop.index-1] }}
    {%- if loop.index < step.pps_names|length -%},
    {%- endif -%}
    {%- endfor -%}):
{%- if not autosnapshot and step.ins|length == 0 and step.outs|length == 0 and step.source|length == 0 %}
    pass
{%- elif step.pps_names|length > 0 %}
    _kale_pipeline_parameters_block = '''
{%- for arg in step.pps_names %}
    {% if (step.pps_types)[loop.index-1] == 'str' %}{{ arg }} = "{}"{% else %}{{ arg }} = {}{% endif -%}
{%- endfor %}
    '''.format({{ step.pps_names|join(', ') }})
{% endif %}
{%- if autosnapshot or step.ins|length > 0 or step.outs|length > 0 or step.source|length > 0 %}
    from kale.common import mlmdutils as _kale_mlmdutils
    _kale_mlmdutils.init_metadata()
{% endif %}
{% if autosnapshot and step.name != 'final_auto_snapshot'  %}
    from kale.common import rokutils as _kale_rokutils
    _kale_mlmdutils.call("link_input_rok_artifacts")
    _kale_rokutils.snapshot_pipeline_step(
        "{{ pipeline_name }}",
        "{{ step.name }}",
        "{{ notebook_path }}",
        before=True)
{% endif %}

{%- if step.ins|length > 0 %}
    _kale_data_loading_block = '''
    # -----------------------DATA LOADING START--------------------------------
    from kale import marshal as _kale_marshal
    _kale_marshal.set_data_dir("{{ marshal_path }}")
{%- for in_var in step.ins|sort %}
    {{ in_var }} = _kale_marshal.load("{{ in_var }}")
{%- endfor %}
    # -----------------------DATA LOADING END----------------------------------
    '''
{% endif %}

{%- for block in step.source %}
    _kale_block{{ loop.index }} = '''
{{block|indent(4, True)}}
    '''
{% endfor %}
{%- if step.outs|length > 0 %}
    _kale_data_saving_block = '''
    # -----------------------DATA SAVING START---------------------------------
    from kale import marshal as _kale_marshal
    _kale_marshal.set_data_dir("{{ marshal_path }}")
{%- for out_var in step.outs|sort %}
    _kale_marshal.save({{ out_var }}, "{{ out_var }}")
{%- endfor %}
    # -----------------------DATA SAVING END-----------------------------------
    '''
{%- endif %}

{% if step.ins|length > 0 or step.outs|length > 0 or step.source|length > 0 %}
    # run the code blocks inside a jupyter kernel
    from kale.common.jputils import run_code as _kale_run_code
    from kale.common.kfputils import \
        update_uimetadata as _kale_update_uimetadata
    _kale_blocks = ({% if step.pps_names|length > 0 %}_kale_pipeline_parameters_block,{% endif -%}
                    {% if step.ins|length > 0 %}_kale_data_loading_block,{% endif -%}
{%- for block in step.source %}
                    _kale_block{{ loop.index }},
{%- endfor %}
                    {% if step.outs|length > 0 %}_kale_data_saving_block{% endif %})
    _kale_html_artifact = _kale_run_code(_kale_blocks)
    with open("/{{ step.name }}.html", "w") as f:
        f.write(_kale_html_artifact)
    _kale_update_uimetadata('{{ step.name }}')
{% endif -%}

{%- if autosnapshot %}
{%- if step.name == 'final_auto_snapshot' %}
    from kale.common import rokutils as _kale_rokutils
    _kale_mlmdutils.call("link_input_rok_artifacts")
{%- endif %}
    _rok_snapshot_task = _kale_rokutils.snapshot_pipeline_step(
        "{{ pipeline_name }}",
        "{{ step.name }}",
        "{{ notebook_path }}",
        before=False)
    _kale_mlmdutils.call("submit_output_rok_artifact", _rok_snapshot_task)
{% endif %}
{%- if autosnapshot or step.ins|length > 0 or step.outs|length > 0 or step.source|length > 0 %}
    _kale_mlmdutils.call("mark_execution_complete")
{%- endif %}
