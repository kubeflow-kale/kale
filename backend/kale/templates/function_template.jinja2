def {{ step_name }}({%- for arg in parameters_names -%}
    {{ arg }}: {{ parameters_types[loop.index-1] }}
    {%- if loop.index < parameters_names|length -%},
    {%- endif -%}
    {%- endfor -%}):
{%- if not autosnapshot and in_variables|length == 0 and out_variables|length == 0 and function_body|length == 0 %}
    pass
{%- elif parameters_names|length > 0 %}
    pipeline_parameters_block = '''
{%- for arg in parameters_names %}
    {% if parameters_types[loop.index-1] == 'str' %}{{ arg }} = "{}"{% else %}{{ arg }} = {}{% endif -%}
{%- endfor %}
    '''.format({{ parameters_names|join(', ') }})
{% endif %}
{%- if autosnapshot or in_variables|length > 0 or out_variables|length > 0 or function_body|length > 0 %}
    from kale.common import mlmdutils as _kale_mlmdutils
    _kale_mlmdutils.init_metadata()
{% endif %}
{% if autosnapshot and step_name != 'final_auto_snapshot'  %}
    from kale.common import podutils as _kale_podutils
    _kale_mlmdutils.call("link_input_rok_artifacts")
    _kale_podutils.snapshot_pipeline_step(
        "{{ pipeline_name }}",
        "{{ step_name }}",
        "{{ nb_path }}",
        before=True)
{% endif %}

{%- if in_variables|length > 0 %}
    data_loading_block = '''
    # -----------------------DATA LOADING START--------------------------------
    from kale.marshal import utils as _kale_marshal_utils
    _kale_marshal_utils.set_kale_data_directory("{{ marshal_path }}")
{%- for in_var in in_variables %}
    {{ in_var }} = _kale_marshal_utils.load("{{ in_var }}")
{%- endfor %}
    # -----------------------DATA LOADING END----------------------------------
    '''
{% endif %}

{%- for block in function_body %}
    block{{ loop.index }} = '''
{{block|indent(4, True)}}
    '''
{% endfor %}
{%- if out_variables|length > 0 %}
    data_saving_block = '''
    # -----------------------DATA SAVING START---------------------------------
    from kale.marshal import utils as _kale_marshal_utils
    _kale_marshal_utils.set_kale_data_directory("{{ marshal_path }}")
{%- for out_var in out_variables %}
    _kale_marshal_utils.save({{ out_var }}, "{{ out_var }}")
{%- endfor %}
    # -----------------------DATA SAVING END-----------------------------------
    '''
{%- endif %}

{% if in_variables|length > 0 or out_variables|length > 0 or function_body|length > 0 %}
    # run the code blocks inside a jupyter kernel
    from kale.common.jputils import run_code as _kale_run_code
    from kale.common.kfputils import \
        update_uimetadata as _kale_update_uimetadata
    blocks = ({% if parameters_names|length > 0 %}pipeline_parameters_block,{% endif -%}
              {% if in_variables|length > 0 %}data_loading_block,{% endif -%}
{%- for block in function_body %}
              block{{ loop.index }},
{%- endfor %}
              {% if out_variables|length > 0 %}data_saving_block{% endif %})
    html_artifact = _kale_run_code(blocks)
    with open("/{{ step_name }}.html", "w") as f:
        f.write(html_artifact)
    _kale_update_uimetadata('{{ step_name }}')
{% endif -%}

{%- if autosnapshot %}
{%- if step_name == 'final_auto_snapshot' %}
    from kale.common import podutils as _kale_podutils
    _kale_mlmdutils.call("link_input_rok_artifacts")
{%- endif %}
    _rok_snapshot_task = _kale_podutils.snapshot_pipeline_step(
        "{{ pipeline_name }}",
        "{{ step_name }}",
        "{{ nb_path }}",
        before=False)
    _kale_mlmdutils.call("submit_output_rok_artifact", _rok_snapshot_task)
{% endif %}
{%- if autosnapshot or in_variables|length > 0 or out_variables|length > 0 or function_body|length > 0 %}
    _kale_mlmdutils.call("mark_execution_complete")
{%- endif %}
