import json

import kfp.dsl as __kfp_dsl
import kfp.components as __kfp_components

from collections import OrderedDict
from kubernetes import client as k8s_client

{# PIPELINE LIGHTWEIGHT COMPONENTS #}
{% for func in lightweight_components -%}
{{func}}
{% endfor -%}

{# DEFINE PIPELINE TASKS FROM FUNCTIONS #}
{%- for name in pipeline.steps_names -%}
{% if docker_image != '' %}
__kale_{{ name }}_op = __kfp_components.func_to_container_op({{ name }}, base_image='{{ docker_image }}')
{% else %}
__kale_{{ name }}_op = __kfp_components.func_to_container_op({{ name }})
{% endif %}
{% endfor -%}

{# DECLARE PIPELINE #}
@__kfp_dsl.pipeline(
   name='{{ pipeline_name }}',
   description='{{ pipeline_description }}'
)
def auto_generated_pipeline({%- for arg in pipeline.pipeline_parameters|pps_names -%}
    {{ arg }}='{{ (pipeline.pipeline_parameters|pps_values)[loop.index-1] }}'
    {%- if loop.index < pipeline.pipeline_parameters|pps_values|length -%},
    {%- endif -%}
    {%- endfor -%}):
    __kale_pvolumes_dict = OrderedDict()
    __kale_volume_step_names = []
    __kale_volume_name_parameters = []

    {% for vol in volumes -%}
    {% set name= vol['name'] %}
    {% set mountpoint = vol['mount_point'] %}
    {% set pvc_size = vol['size']|string|default ('') + vol['size_type']|default ('') %}
    {% set annotations = vol['annotations']|default({}) %}
    __kale_annotations = {{ annotations }}

    {% if vol['type'] == 'pv' %}

    __kale_pvc{{ loop.index }}  = k8s_client.V1PersistentVolumeClaim(
        api_version="v1",
        kind="PersistentVolumeClaim",
        metadata=k8s_client.V1ObjectMeta(
            name="{{ name }}-claim-{{ pipeline_name }}"
        ),
        spec=k8s_client.V1PersistentVolumeClaimSpec(
            volume_name="{{ name }}",
            access_modes=['ReadWriteOnce'],
            resources=k8s_client.V1ResourceRequirements(
                requests={"storage": {{ pvc_size }}}
            )
        )
    )

    vop{{ loop.index }} = __kfp_dsl__kale_de.VolumeOp(
        name="pvc-data{{ loop.index }}",
        annotations=__kale_annotations,
        k8s_resource=__kale_pvc{{ loop.index }}
    )
    volume = vop{{ loop.index }}.volume
    __kale_volume_step_names.append(vop{{ loop.index }}.name)
    __kale_volume_name_parameters.append(vop{{ loop.index }}.outputs["name"].full_name)

    {% elif vol['type'] == 'pvc' %}

    __kale_volume = __kfp_dsl.PipelineVolume(pvc=vol_{{ mountpoint.replace('/', '_').strip('_') }})

    {% elif vol['type'] == 'new_pvc' %}
    {% if annotations.get('rok/origin') %}
    __kale_annotations['rok/origin'] = rok_{{ name.replace('-', '_') }}_url
    {% endif %}

    __kale_vop{{ loop.index }} = __kfp_dsl.VolumeOp(
        name='create-volume-{{ loop.index }}',
        resource_name='{{ name }}',
        {%- if annotations %}
        annotations=__kale_annotations,
        {% endif -%}
        size='{{ pvc_size }}'
    )
    __kale_volume = __kale_vop{{ loop.index }}.volume
    __kale_volume_step_names.append(__kale_vop{{ loop.index }}.name)
    __kale_volume_name_parameters.append(__kale_vop{{ loop.index }}.outputs["name"].full_name)

    {% endif %}

    __kale_pvolumes_dict['{{ mountpoint }}'] = __kale_volume

    {% endfor %}

    {% if marshal_volume %}
    __kale_marshal_vop = __kfp_dsl.VolumeOp(
        name="kale-marshal-volume",
        resource_name="kale-marshal-pvc",
        modes=__kfp_dsl.VOLUME_MODE_RWM,
        size="1Gi"
    )
    __kale_volume_step_names.append(__kale_marshal_vop.name)
    __kale_volume_name_parameters.append(__kale_marshal_vop.outputs["name"].full_name)
    __kale_pvolumes_dict['{{ marshal_path }}'] = __kale_marshal_vop.volume
    {% endif %}

    __kale_volume_step_names.sort()
    __kale_volume_name_parameters.sort()

    {% for step in pipeline.steps %}
    __kale_{{ step.name }}_task = __kale_{{ step.name }}_op({{ pipeline.all_steps_parameters[step.name]|join(', ') }})\
                            .add_pvolumes(__kale_pvolumes_dict)\
                            .after({{ pipeline.pipeline_dependencies_tasks[ step.name ]|join(', ') }})
    {%- if step.config.annotations %}
    __kale_step_annotations = {{ step.config.annotations }}
    for __kale_k, __kale_v in __kale_step_annotations.items():
        __kale_{{ step.name }}_task.add_pod_annotation(__kale_k, __kale_v)
    {%- endif %}
    {%- if step.config.labels %}
    __kale_step_labels = {{ step.config.labels }}
    for __kale_k, __kale_v in __kale_step_labels.items():
      __kale_{{ step.name }}_task.add_pod_label(__kale_k, __kale_v)
    {%- endif %}
    {%- if step.config.limits %}
    __kale_step_limits = {{ step.config.limits }}
    for __kale_k, __kale_v in __kale_step_limits.items():
      __kale_{{ step.name }}_task.container.add_resource_limit(__kale_k, __kale_v)
    {%- endif %}
    __kale_{{ step.name }}_task.container.working_dir = "{{ abs_working_dir }}"
    __kale_{{ step.name }}_task.container.set_security_context(k8s_client.V1SecurityContext(run_as_user=0))
    __kale_output_artifacts = {}
    {%- if autosnapshot %}
    __kale_output_artifacts.update({'mlpipeline-ui-metadata': '/mlpipeline-ui-metadata.json'})
    {%- endif %}
    {%- if step.metrics %}
    __kale_output_artifacts.update({'mlpipeline-metrics': '/mlpipeline-metrics.json'})
    {%- endif %}
    {%- if step.name != "final_auto_snapshot" and step.name != "pipeline_metrics" %}
    __kale_output_artifacts.update({'mlpipeline-ui-metadata': '/mlpipeline-ui-metadata.json'})
    __kale_output_artifacts.update({'{{ step.name }}': '/{{ step.name }}.html'})
    {%- endif %}
    __kale_{{ step.name }}_task.output_artifact_paths.update(__kale_output_artifacts)
    __kale_{{ step.name }}_task.add_pod_label("pipelines.kubeflow.org/metadata_written", "true")
    __kale_dep_names = (__kale_{{ step.name }}_task.dependent_names +
                        __kale_volume_step_names)
    __kale_{{ step.name }}_task.add_pod_annotation(
        "kubeflow-kale.org/dependent-templates", json.dumps(__kale_dep_names))
    if __kale_volume_name_parameters:
        __kale_{{ step.name }}_task.add_pod_annotation(
            "kubeflow-kale.org/volume-name-parameters",
            json.dumps(__kale_volume_name_parameters))
    {% endfor %}

    {# Snaphosts #}
    {% for vol in volumes -%}
    {% if vol['snapshot'] %}
    __kale_snapshot{{ loop.index }} = __kfp_dsl.VolumeSnapshotOp(
        name='snapshot-volume-{{ loop.index }}',
        resource_name='{{ vol['snapshot_name'] }}',
        volume=__kale_vop{{ loop.index }}.volume.after({{ pipeline.get_leaf_nodes()| map('add_suffix', '_task') | join(', ') }})
    )
    {% endif %}
    {% endfor %}


{# The script will deploy the pipeline if run manually #}
if __name__ == "__main__":
    pipeline_func = auto_generated_pipeline
    pipeline_filename = pipeline_func.__name__ + '.pipeline.tar.gz'
    import kfp.compiler as compiler
    compiler.Compiler().compile(pipeline_func, pipeline_filename)

    # Get or create an experiment and submit a pipeline run
    import kfp
    client = kfp.Client()
    experiment = client.create_experiment('{{ experiment_name }}')

    # Submit a pipeline run
    from kale.common.kfputils import generate_run_name
    run_name = generate_run_name('{{ pipeline_name }}')
    run_result = client.run_pipeline(experiment.id, run_name, pipeline_filename, {})
