def {{ step_name }}({%- for arg in parameters_names -%}
    {{ arg }}: {{ parameters_types[loop.index-1] }}
    {%- if loop.index < parameters_names|length -%},
    {%- endif -%}
    {%- endfor -%}):
{%- if not auto_snapshot and in_variables|length == 0 and out_variables|length == 0 and function_body|length == 0 %}
    pass
{%- elif parameters_names|length > 0 %}
    pipeline_parameters_block = '''
{%- for arg in parameters_names %}
    {% if parameters_types[loop.index-1] == 'str' %}{{ arg }} = "{}"{% else %}{{ arg }} = {}{% endif -%}
{%- endfor %}
    '''.format({{ parameters_names|join(', ') }})
{% endif %}
{%- if auto_snapshot %}
    from kale.utils import pod_utils as _kale_pod_utils
    _kale_pod_utils.snapshot_pipeline_step(
        "{{ pipeline_name }}",
        "{{ step_name }}",
        "{{ nb_path }}")
{% endif %}

{%- if in_variables|length > 0 or out_variables|length > 0 %}
    data_dir_block = '''
    import os
    _kale_data_directory = "{{ marshal_path }}"
    {#- Verify directory exists #}
    if not os.path.isdir(_kale_data_directory):
        os.makedirs(_kale_data_directory, exist_ok=True)
    '''
{% endif %}

{%- if in_variables|length > 0 %}
    data_loading_block = '''
    import os
    from kale.marshal import resource_load as _kale_resource_load

    # -----------------------DATA LOADING START--------------------------------
    _kale_directory_file_names = [
        os.path.splitext(f)[0]
        for f in os.listdir(_kale_data_directory)
        if os.path.isfile(os.path.join(_kale_data_directory, f))
    ]

{%- for in_var in in_variables %}
    {#- First check that the variable exists in the path #}
    if "{{ in_var }}" not in _kale_directory_file_names:
        raise ValueError("{{ in_var }}" + " does not exists in directory")

    {#- Load variable #}
    _kale_load_file_name = [
        f
        for f in os.listdir(_kale_data_directory)
        if (os.path.isfile(os.path.join(_kale_data_directory, f)) and
            os.path.splitext(f)[0] == "{{ in_var }}")
    ]
    if len(_kale_load_file_name) > 1:
        raise ValueError("Found multiple files with name %s: %s"
                         % ("{{ in_var }}", str(_kale_load_file_name)))
    _kale_load_file_name = _kale_load_file_name[0]
    {{ in_var }} = _kale_resource_load(
        os.path.join(_kale_data_directory, _kale_load_file_name))
{%- endfor %}
    # -----------------------DATA LOADING END----------------------------------
    '''
{% endif %}

{%- for block in function_body %}
    block{{ loop.index }} = '''
{{block|indent(4, True)}}
    '''
{% endfor %}
{%- if out_variables|length > 0 %}
    data_saving_block = '''
    import os
    from kale.marshal import resource_save as _kale_resource_save
    # -----------------------DATA SAVING START---------------------------------
{%- for out_var in out_variables %}
    if "{{ out_var }}" in locals():
        {#-  `_kale_resource_save` will automatically add the correct extension #}
        _kale_resource_save(
            {{ out_var }}, os.path.join(_kale_data_directory, "{{ out_var }}"))
    else:
        print("_kale_resource_save: `{{ out_var }}` not found.")
{%- endfor %}
    # -----------------------DATA SAVING END-----------------------------------
    '''
{%- endif %}

{% if in_variables|length > 0 or out_variables|length > 0 or function_body|length > 0 %}
    # run the code blocks inside a jupyter kernel
    from kale.utils.jupyter_utils import run_code as _kale_run_code
    from kale.utils.jupyter_utils import update_uimetadata as _kale_update_uimetadata
    blocks = ({% if in_variables|length > 0 or out_variables|length > 0 %}data_dir_block,{% endif -%}
              {% if parameters_names|length > 0 %}pipeline_parameters_block,{% endif -%}
              {% if in_variables|length > 0 %}data_loading_block,{% endif -%}
{%- for block in function_body %}
              block{{ loop.index }},
{%- endfor %}
              {% if out_variables|length > 0 %}data_saving_block{% endif %})
    html_artifact = _kale_run_code(blocks)
    with open("/{{ step_name }}.html", "w") as f:
        f.write(html_artifact)
    _kale_update_uimetadata('{{ step_name }}')
{% endif -%}
